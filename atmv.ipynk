{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dN(x):\n",
    "    return math.exp(-0.5*x**2)/math.sqrt(2*math.pi)\n",
    "\n",
    "def N(d):\n",
    "    return quad(lambda x:dN(x),-20,d,limit=50)[0]\n",
    "\n",
    "def d1f(St, K, t, T, r, sigma):\n",
    "    d1 = (math.log(St / K) + (r + 0.5 * sigma ** 2) * (T - t)) / (sigma * math.sqrt(T - t))\n",
    "    return d1\n",
    "\n",
    "def BSM_call_value(St, K, t, T, r, sigma):\n",
    "    d1=d1f(St,K,t,T,r,sigma)\n",
    "    d2=d1-sigma*math.sqrt(T-t)\n",
    "    call_value = St * N(d1) - math.exp(-r * (T - t)) * K * N(d2)\n",
    "    return call_value\n",
    "\n",
    "def BSM_put_value(St, K, t, T, r, sigma):\n",
    "    put_value = BSM_call_value(St,K,t,T,r,sigma)-St + math.exp(-r * (T - t)) * K\n",
    "    return put_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BSM_delta (St, K, t, T, r, sigma):\n",
    "    d1=d1f(St, K, t, T, r, sigma)\n",
    "    delta=N(d1)\n",
    "    return delta\n",
    "\n",
    "def BSM_gamma(St, K, t, T, r, sigma):\n",
    "    d1=d1f(St, K, t, T, r, sigma)\n",
    "    gamma=dN(d1) / (St * sigma*math.sqrt(T-t))\n",
    "    return gamma\n",
    "\n",
    "def BSM_theta(St, K, t, T, r,sigma): #轉成正值\n",
    "    d1 = d1f(St, K, t, T, r, sigma)\n",
    "    d2 = d1 - sigma * math.sqrt(T - t)\n",
    "    theta = -(St * dN(d1) * sigma / (2 * math.sqrt(T - t))\n",
    "              + r * K * math.exp(-r * (T - t)) * N(d2))\n",
    "    return -theta\n",
    "\n",
    "def BSM_rho(St, K, t, T, r, sigma):\n",
    "    d1 = d1f(St, K, t, T, r, sigma)\n",
    "    d2 = d1 - sigma * math.sqrt(T - t)\n",
    "    rho = K * (T - t) * math.exp(-r * (T - t)) * N(d2)\n",
    "    return rho\n",
    "\n",
    "def BSM_vega(St, K, t, T, r, sigma):\n",
    "    d1 = d1f(St, K, t, T, r, sigma)\n",
    "    vega = St * dN(d1) * math.sqrt(T - t)\n",
    "    return vega\n",
    "\n",
    "def BSM_vanna(St, K, t, T, r, sigma):\n",
    "    d1 = d1f(St, K, t, T, r, sigma)\n",
    "    d2 = d1 - sigma * math.sqrt(T - t)\n",
    "    return dN(d1) * (-d2) / sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = norm.pdf\n",
    "N = norm.cdf\n",
    "\n",
    "def bs(cp_flag, S, K, r, q, T, sigma):\n",
    "    d1 = (np.log(S / K) + (r - q + (sigma ** 2) * 0.5) * T) / (sigma * np.sqrt(T))\n",
    "    d2 = d1 - sigma * np.sqrt(T)\n",
    "    if cp_flag == 'c':\n",
    "        price = S * np.exp(-q * T) * N(d1) - K * np.exp(-r * T) * N(d2)\n",
    "    else:\n",
    "        price = K * np.exp(-r * T) * N(-d2) - S * np.exp(-q * T) * N(-d1)\n",
    "    return price\n",
    "\n",
    "def bs_diff(cp_flag, S, K, r, q, T, sigma):\n",
    "    d1 = (np.log(S / K) + (r - q + (sigma ** 2) * 0.5) * T) / (sigma * np.sqrt(T))\n",
    "    return S * np.sqrt(T) * n(d1)\n",
    "\n",
    "def find_vol(target_value, call_put, S, K, T, r, q):\n",
    "    MAX_ITERATIONS = 1000\n",
    "    PRECISION = 1.0e-10\n",
    "\n",
    "    sigma = 0.5\n",
    "    for i in range(0, MAX_ITERATIONS):\n",
    "        price = bs(call_put, S, K, r, q, T, sigma)\n",
    "        bs_dif = bs_diff(call_put, S, K, r, q, T, sigma)\n",
    "\n",
    "        price = price\n",
    "        diff = target_value - price  # our root\n",
    "\n",
    "#         print (i, sigma, diff)\n",
    "\n",
    "        if (abs(diff) < PRECISION):\n",
    "            return sigma\n",
    "        sigma = sigma + diff/bs_dif # f(x) / f'(x)\n",
    "\n",
    "    # value wasn't found, return best guess so far\n",
    "    return sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "vol = lambda p_list, strike, cp : [find_vol(p_list[i], cp, S, strike[i], T, r, q) for i in range(len(strike))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "K = np.linspace(-1, 1, 13, dtype=int) * 300 + 11000\n",
    "call_b = [341, 297, 256, 217, 180, 145, 114, 87, 63, 44, 29.5, 18.5, 11.5]\n",
    "call_a = [345, 305, 259, 219, 181, 147, 115, 88, 65, 45, 30, 19, 12]\n",
    "put_b = [27.5, 34, 42, 52, 64, 80, 98, 121, 148, 178, 213, 251, 295]\n",
    "put_a = [28, 34.5, 43, 54, 66, 81, 99, 123, 149, 181, 216, 256, 300]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# S = 11010 * np.exp(- r * T)\n",
    "r = 0.01\n",
    "T = 1 / 52\n",
    "q = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "S = 11010 * np.exp(r * T)\n",
    "call_b_v = vol(call_b, K, 'c')\n",
    "call_a_v = vol(call_a, K, 'c')\n",
    "put_b_v = vol(put_b, K, 'p')\n",
    "put_a_v = vol(put_a, K, 'p')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "voll = pd.DataFrame([call_b_v, call_a_v, put_b_v, put_a_v])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "voll.columns = K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10700</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11300</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.210507</td>\n",
       "      <td>0.202741</td>\n",
       "      <td>0.198280</td>\n",
       "      <td>0.193545</td>\n",
       "      <td>0.187938</td>\n",
       "      <td>0.180951</td>\n",
       "      <td>0.175311</td>\n",
       "      <td>0.170273</td>\n",
       "      <td>0.163648</td>\n",
       "      <td>0.158504</td>\n",
       "      <td>0.154306</td>\n",
       "      <td>0.149649</td>\n",
       "      <td>0.147546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.221143</td>\n",
       "      <td>0.221442</td>\n",
       "      <td>0.204648</td>\n",
       "      <td>0.197402</td>\n",
       "      <td>0.189724</td>\n",
       "      <td>0.184333</td>\n",
       "      <td>0.176956</td>\n",
       "      <td>0.171928</td>\n",
       "      <td>0.167111</td>\n",
       "      <td>0.160406</td>\n",
       "      <td>0.155408</td>\n",
       "      <td>0.151010</td>\n",
       "      <td>0.149304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.212337</td>\n",
       "      <td>0.205585</td>\n",
       "      <td>0.198695</td>\n",
       "      <td>0.192003</td>\n",
       "      <td>0.184740</td>\n",
       "      <td>0.179637</td>\n",
       "      <td>0.172404</td>\n",
       "      <td>0.167365</td>\n",
       "      <td>0.162350</td>\n",
       "      <td>0.155180</td>\n",
       "      <td>0.149331</td>\n",
       "      <td>0.140547</td>\n",
       "      <td>0.139339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.213683</td>\n",
       "      <td>0.206776</td>\n",
       "      <td>0.200827</td>\n",
       "      <td>0.195869</td>\n",
       "      <td>0.188320</td>\n",
       "      <td>0.181329</td>\n",
       "      <td>0.174049</td>\n",
       "      <td>0.170674</td>\n",
       "      <td>0.164084</td>\n",
       "      <td>0.160903</td>\n",
       "      <td>0.156004</td>\n",
       "      <td>0.154440</td>\n",
       "      <td>0.156987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      10700     11000     11000     11000     11000     11000     11000  \\\n",
       "0  0.210507  0.202741  0.198280  0.193545  0.187938  0.180951  0.175311   \n",
       "1  0.221143  0.221442  0.204648  0.197402  0.189724  0.184333  0.176956   \n",
       "2  0.212337  0.205585  0.198695  0.192003  0.184740  0.179637  0.172404   \n",
       "3  0.213683  0.206776  0.200827  0.195869  0.188320  0.181329  0.174049   \n",
       "\n",
       "      11000     11000     11000     11000     11000     11300  \n",
       "0  0.170273  0.163648  0.158504  0.154306  0.149649  0.147546  \n",
       "1  0.171928  0.167111  0.160406  0.155408  0.151010  0.149304  \n",
       "2  0.167365  0.162350  0.155180  0.149331  0.140547  0.139339  \n",
       "3  0.170674  0.164084  0.160903  0.156004  0.154440  0.156987  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "voll"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "voll = voll.apply(lambda x: x.sort_values().values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10700</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11300</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.210507</td>\n",
       "      <td>0.202741</td>\n",
       "      <td>0.198280</td>\n",
       "      <td>0.192003</td>\n",
       "      <td>0.184740</td>\n",
       "      <td>0.179637</td>\n",
       "      <td>0.172404</td>\n",
       "      <td>0.167365</td>\n",
       "      <td>0.162350</td>\n",
       "      <td>0.155180</td>\n",
       "      <td>0.149331</td>\n",
       "      <td>0.140547</td>\n",
       "      <td>0.139339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.212337</td>\n",
       "      <td>0.205585</td>\n",
       "      <td>0.198695</td>\n",
       "      <td>0.193545</td>\n",
       "      <td>0.187938</td>\n",
       "      <td>0.180951</td>\n",
       "      <td>0.174049</td>\n",
       "      <td>0.170273</td>\n",
       "      <td>0.163648</td>\n",
       "      <td>0.158504</td>\n",
       "      <td>0.154306</td>\n",
       "      <td>0.149649</td>\n",
       "      <td>0.147546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.213683</td>\n",
       "      <td>0.206776</td>\n",
       "      <td>0.200827</td>\n",
       "      <td>0.195869</td>\n",
       "      <td>0.188320</td>\n",
       "      <td>0.181329</td>\n",
       "      <td>0.175311</td>\n",
       "      <td>0.170674</td>\n",
       "      <td>0.164084</td>\n",
       "      <td>0.160406</td>\n",
       "      <td>0.155408</td>\n",
       "      <td>0.151010</td>\n",
       "      <td>0.149304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.221143</td>\n",
       "      <td>0.221442</td>\n",
       "      <td>0.204648</td>\n",
       "      <td>0.197402</td>\n",
       "      <td>0.189724</td>\n",
       "      <td>0.184333</td>\n",
       "      <td>0.176956</td>\n",
       "      <td>0.171928</td>\n",
       "      <td>0.167111</td>\n",
       "      <td>0.160903</td>\n",
       "      <td>0.156004</td>\n",
       "      <td>0.154440</td>\n",
       "      <td>0.156987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      10700     11000     11000     11000     11000     11000     11000  \\\n",
       "0  0.210507  0.202741  0.198280  0.192003  0.184740  0.179637  0.172404   \n",
       "1  0.212337  0.205585  0.198695  0.193545  0.187938  0.180951  0.174049   \n",
       "2  0.213683  0.206776  0.200827  0.195869  0.188320  0.181329  0.175311   \n",
       "3  0.221143  0.221442  0.204648  0.197402  0.189724  0.184333  0.176956   \n",
       "\n",
       "      11000     11000     11000     11000     11000     11300  \n",
       "0  0.167365  0.162350  0.155180  0.149331  0.140547  0.139339  \n",
       "1  0.170273  0.163648  0.158504  0.154306  0.149649  0.147546  \n",
       "2  0.170674  0.164084  0.160406  0.155408  0.151010  0.149304  \n",
       "3  0.171928  0.167111  0.160903  0.156004  0.154440  0.156987  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "voll"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "vol = pd.DataFrame(voll.iloc[[1,2], :].mean()).transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10700</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11000</th>\n",
       "      <th>11300</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.21301</td>\n",
       "      <td>0.206181</td>\n",
       "      <td>0.199761</td>\n",
       "      <td>0.194707</td>\n",
       "      <td>0.188129</td>\n",
       "      <td>0.18114</td>\n",
       "      <td>0.17468</td>\n",
       "      <td>0.170474</td>\n",
       "      <td>0.163866</td>\n",
       "      <td>0.159455</td>\n",
       "      <td>0.154857</td>\n",
       "      <td>0.150329</td>\n",
       "      <td>0.148425</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     10700     11000     11000     11000     11000    11000    11000  \\\n",
       "0  0.21301  0.206181  0.199761  0.194707  0.188129  0.18114  0.17468   \n",
       "\n",
       "      11000     11000     11000     11000     11000     11300  \n",
       "0  0.170474  0.163866  0.159455  0.154857  0.150329  0.148425  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0xf202d48>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.scatter(K, call_b_v, marker='^', label='call bid')\n",
    "plt.scatter(K, call_a_v, marker='^', label='call ask')\n",
    "plt.scatter(K, put_b_v, marker='s', label='put bid')\n",
    "plt.scatter(K, put_a_v, marker='s', label='put ask')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.20618058765595487"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vol.iloc[0, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "vega = [BSM_vega(S, K[i], 0, T, r, vol.iloc[0, i]) for i in range(len(K))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[371.4924194382857,\n",
       " 608.1486356210991,\n",
       " 608.1118192040815,\n",
       " 608.0798808089837,\n",
       " 608.0339323040903,\n",
       " 607.9789431305206,\n",
       " 607.9216044019199,\n",
       " 607.8804441905768,\n",
       " 607.8088351636034,\n",
       " 607.7557093124427,\n",
       " 607.6951741978675,\n",
       " 607.6298183428859,\n",
       " 284.46955216760557]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vega"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
